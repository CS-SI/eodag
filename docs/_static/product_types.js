/**
 * Update the style of one link among those in the "column_links" paragraph
 * @param {HTMLAnchorElement} link The link whose style will be updated
 */
function update_link_style(link) {
    if (link.className.includes("highlighted")) {
        link.style.color = "#fafafa";
        link.style.background = "rgb(232,62,140)";
    } else {
        link.style.color = "rgb(232,62,140)";
        link.style.background = "transparent";
    }
}

/**
 * After clicking on a column link, it may be necessary to update the style of the "all" and "none" links
 */
function update_all_none_links_style() {
    let all_link = document.getElementById("all_link");
    let none_link = document.getElementById("none_link");

    /* Hide the "all" link when it is highlighted */
    if (all_link.className == "highlighted") {
        all_link.className = "hidden";
        update_link_style(all_link);
    }

    /* Hide the "none" link when it is highlighted */
    if (none_link.className == "highlighted") {
        none_link.className = "hidden";
        update_link_style(none_link);
    }

    /* Highlight the "all" link when all the column links are highlighted */
    if (JSON.stringify(document.getElementsByClassName("toggle-vis highlighted")) == JSON.stringify(document.getElementsByClassName("toggle-vis"))) {
        all_link.className = "highlighted";
        update_link_style(all_link);
    }

    /* Highlight the "none" link when all the column links are hidden */
    if (JSON.stringify(document.getElementsByClassName("toggle-vis highlighted")) == "{}") {
        none_link.className = "highlighted";
        update_link_style(none_link);
    }
}

/**
 * Show all the columns of the table
 */
function show_all() {
    let hidden_toggle_vis_list = document.getElementsByClassName("toggle-vis hidden");
    let hidden_toggle_vis_list_length = hidden_toggle_vis_list.length;

    /* Show the columns with a hidden link by simulating a click on their links */
    for (let i = 0; i < hidden_toggle_vis_list_length; i++) {
        hidden_toggle_vis_list[0].click();
    }
}

/**
 * Hide all the columns of the table
 */
function hide_all() {
    let highlighted_toggle_vis_list = document.getElementsByClassName("toggle-vis highlighted");
    let highlighted_toggle_vis_list_length = highlighted_toggle_vis_list.length;

    /* Hide the columns with an highlighted link by simulating a click on their links */
    for (let i = 0; i < highlighted_toggle_vis_list_length; i++) {
        highlighted_toggle_vis_list[0].click();
    }
}

/**
 * Add a title tooltip to each product type paragraph
 * @param {HTMLTableElement} datatable_table The table element of the datatable generated by ./product_types_information.csv
 */
function add_title_tooltip(datatable_table) {
    let head_row_th = datatable_table.getElementsByTagName("THEAD")[0].getElementsByTagName("TH");
    let product_type_rows = document.getElementsByTagName("TBODY")[0].getElementsByTagName("TR");

    /* Seek the title column index */
    let title_index = 1;
    while (head_row_th[title_index].children[0].innerHTML != "title") {
        title_index++;
    }

    /* Add tooltips containing the product type titles to the product type paragraphs */
    for (let i = 0; i < product_type_rows.length; i++) {
        let row_title = product_type_rows[i].children[title_index].children[0].innerHTML;
        let product_type_paragraph = product_type_rows[i].children[0].children[0];
        product_type_paragraph.innerHTML = `<abbr title="${row_title}">${product_type_paragraph.innerHTML}</abbr>`;
    }
}

/**
 * Add style to the table and its cells
 * @param {Object} table The table object generated by ./product_types_information.csv
 */
function style_table(table) {
    let dataTables_table_0 = table.context[0].oInstance[0];
    let dataTables_table_0_td = dataTables_table_0.getElementsByTagName("TD");

    /* Add pre-made style classes for datatables to the table element */
    dataTables_table_0.classList.add("hover", "cell-border");

    /* Continue to style the table */
    dataTables_table_0.style.display = "block";
    dataTables_table_0.style.overflowX = "auto";
    dataTables_table_0.style.width = "100%";
    dataTables_table_0.style.maxHeight = "500px";
    dataTables_table_0.style.fontSize = "smaller";
    dataTables_table_0.style.borderBottom = "0";

    /* Style table cells */
    for (let i = 0; i < dataTables_table_0_td.length; i++) {
        dataTables_table_0_td[i].style.paddingTop = "0";
        dataTables_table_0_td[i].style.paddingBottom = "0";
    }

    /* Create a title tooltip for each product type */
    add_title_tooltip(dataTables_table_0);
}

/**
 * Display the initial configuration by managing table and column links style
 * and hiding columns with hidden links in the table
 * @param {Object} table The table object generated by ./product_types_information.csv
 */
function display_initial_configuration(table) {
    let toggle_vis_list = document.getElementsByClassName("toggle-vis");
    let all_link = document.getElementById("all_link");
    let none_link = document.getElementById("none_link");

    /* Add style to the table */
    style_table(table);

    /* Hide the "all" and "none" links */
    update_link_style(all_link);
    update_link_style(none_link);

    for (let i = 0; i < toggle_vis_list.length; i++) {
        /* Highlight default columns of the initial configuration and hide the other ones */
        update_link_style(toggle_vis_list[i]);
        /* Hide columns in the table if their links are hidden */
        if (toggle_vis_list[i].className == "toggle-vis hidden") {
            table.column(parseInt(toggle_vis_list[i].attributes["data-column"].value)).visible(false, false);
        }
    }
    /* Adjust column sizing and redraw */
    table.columns.adjust().draw(false);
}

/**
 * Initialize the display of the table and the paragraph containing all the links about columns management
 * @param {Object} table The table object generated by ./product_types_information.csv
 */
function init_table_and_column_links_paragraph_display(table) {
    let links_paragraph = document.getElementById("column_links");
    let dataTables_table_0 = table.context[0].oInstance[0];
    let table_0_thead_tr = dataTables_table_0.children[1].children[0];
    let hidden_parameters = ["abstract", "instrument", "platformSerialIdentifier", "keywords", "sensorType", "license", "title", "missionStartDate"];

    /* Create the "all" and "none" links with hidden classes */
    links_paragraph.innerHTML = `Show / hide columns: <a id="all_link" class="hidden" onclick="show_all()">all</a> / <a id="none_link" class="hidden" onclick="hide_all()">none</a></br>`;

    /* Create a link for each column with the corresponding classes */
    for (let i = 1; i < table_0_thead_tr.childElementCount; i++) {
        let column_name = table_0_thead_tr.children[i].children[0].innerHTML;
        if (hidden_parameters.includes(column_name)) {
            link_second_class = "hidden";
        } else {
            link_second_class = "highlighted";
        }
        if (i == 1) {
            links_paragraph.innerHTML += `<a class="toggle-vis ${link_second_class}" data-column="${i}">${column_name}</a>`;
        } else {
            links_paragraph.innerHTML += ` - <a class="toggle-vis ${link_second_class}" data-column="${i}">${column_name}</a>`;
        }
    }

    /* Finish the initial configuration display by styling elements */
    display_initial_configuration(table);
}

$(document).ready(function () {
    let table_0 = $('table.datatable').DataTable({
        pagingType: 'full_numbers'
    });
    let table_0_span = document.getElementById("table_0_span");

    /* Run the display initialization function once the table has been loaded in one of its parent elements */
    table_0_span.addEventListener('DOMSubtreeModified', init_table_and_column_links_paragraph_display(table_0), false);

    /* When the link of a column is clicked, toggle the visibility of this column in the table
       and update its style and the one of the "all" and "none" links */
    $('a.toggle-vis').on('click', function (e) {
        e.preventDefault();

        /* Get the column API object */
        let column = table_0.column($(this).attr('data-column'));

        /* Toggle the visibility in the table */
        column.visible(!column.visible());

        /* Toggle link classes */
        $(this).toggleClass("highlighted");
        $(this).toggleClass("hidden");

        /* Update the style of the clicked link and the one of the "all" and "none" links */
        update_link_style($(this)[0]);
        update_all_none_links_style();
    });
});
